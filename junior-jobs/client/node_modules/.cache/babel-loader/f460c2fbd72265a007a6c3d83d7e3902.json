{"ast":null,"code":"var _jsxFileName = \"/Users/zacharydorcinville/junior-dev/junior-jobs/client/src/Jobs.js\";\nimport React, { useState, useEffect } from 'react';\nimport Job from './Job';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport MobileStepper from '@material-ui/core/MobileStepper';\nimport JobModal from './JobModal';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nexport default function Jobs({\n  jobs\n}) {\n  // modal\n  const [open, setOpen] = useState(false);\n  const [selectedJob, selectJob] = useState({});\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  }; // pagination (FIX THIS)\n\n\n  const [activeStep, setActiveStep] = useState(0);\n  const numJobs = jobs.length;\n  const numPages = Math.ceil(numJobs / 50);\n  const jobsOnPage = jobs.slice(activeStep * 50, activeStep * 50 + 50); // get distinct locations, job types, and dates posted for all jobs\n\n  const [jobsShown, setJobsShown] = useState([]);\n  const locations = [];\n  const jobTypes = [];\n  const datesPosted = [];\n  jobs.forEach(job => {\n    if (locations.includes(job.location)) return;\n    locations.push(job.location);\n    if (jobTypes.includes(job.type)) return;\n    jobTypes.push(job.type);\n    if (datesPosted.includes(job.created_at)) return;\n    datesPosted.push(job.created_at);\n  });\n  useEffect(() => {\n    setJobsShown(jobsOnPage);\n  }, [numJobs]);\n\n  function handleNext() {\n    setActiveStep(prevActiveStep => prevActiveStep + 1);\n  }\n\n  function handleBack() {\n    setActiveStep(prevActiveStep => prevActiveStep - 1);\n  }\n\n  function handleLocationChange(event, value) {\n    if (value === null) {\n      setJobsShown(jobsOnPage);\n    } else {\n      const newJobs = jobs.filter(job => {\n        return job.location === value;\n      });\n      setJobsShown(newJobs);\n    }\n  }\n\n  function handleTypeChange(event, value) {\n    if (value === null) {\n      setJobsShown(jobsOnPage);\n    } else {\n      const newJobs = jobs.filter(job => {\n        return job.type === value;\n      });\n      setJobsShown(newJobs);\n    }\n  }\n\n  function handleDateChange(event, value) {\n    if (value === null) {\n      setJobsShown(jobsOnPage);\n    } else {\n      const newJobs = jobs.filter(job => {\n        return job.created_at === value;\n      });\n      setJobsShown(newJobs);\n    }\n  } // set random key for each job listing\n\n\n  function generateId(length) {\n    var result = '';\n    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var charactersLength = characters.length;\n\n    for (var i = 0; i < length; i++) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n\n    return result;\n  }\n\n  const filterStyle = makeStyles({\n    field: {\n      width: '120px',\n      margin: '20px'\n    }\n  });\n  const filterContainerStyle = {\n    width: '200px',\n    marginTop: '200px',\n    border: '2px solid black',\n    position: 'absolute',\n    backgroundColor: 'white',\n    borderRadius: '0px 25px 25px 0px',\n    zIndex: '2'\n  };\n  const style = filterStyle();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"jobs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 14\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"filters col-sm-2\",\n    style: filterContainerStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Autocomplete, {\n    className: style.field,\n    id: \"location-filter\",\n    options: locations,\n    onChange: handleLocationChange,\n    renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n      label: \"Location\",\n      variant: \"outlined\",\n      autoComplete: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 29\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Autocomplete, {\n    className: style.field,\n    id: \"type-filter\",\n    options: jobTypes,\n    onChange: handleTypeChange,\n    renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n      label: \"Job Type\",\n      variant: \"outlined\",\n      autoComplete: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 33\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Autocomplete, {\n    className: style.field,\n    id: \"location-filter\",\n    options: datesPosted,\n    onChange: handleDateChange,\n    renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n      label: \"Date Posted\",\n      variant: \"outlined\",\n      autoComplete: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 37\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(JobModal, {\n    open: open,\n    job: selectedJob,\n    handleClose: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 25\n    }\n  }), \" \", /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h4\",\n    component: \"h1\",\n    style: {\n      color: 'white',\n      fontFamily: 'Encode Sans',\n      fontSize: '27px',\n      textAlign: 'left'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 28\n    }\n  }, \"Junior Level Software Developer Jobs \"), \" \", /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    component: \"h1\",\n    style: {\n      color: 'white',\n      fontFamily: 'Encode Sans',\n      fontSize: '16px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 38\n    }\n  }, \" \", numJobs, \"jobs found. \"), jobsShown.map(job => /*#__PURE__*/React.createElement(Job, {\n    job: job,\n    key: generateId(6),\n    onClick: () => {\n      selectJob(job);\n      handleClickOpen();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 52\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"page-num\",\n    style: {\n      padding: '8px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 33\n    }\n  }, \"Page \", activeStep + 1, \"of \", numPages, \" \"), /*#__PURE__*/React.createElement(MobileStepper, {\n    variant: \"progress\",\n    steps: Math.ceil(numJobs / 50),\n    position: \"static\",\n    activeStep: activeStep,\n    nextButton: /*#__PURE__*/React.createElement(Button, {\n      size: \"small\",\n      onClick: handleNext,\n      disabled: activeStep === 5,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 48\n      }\n    }, \"Next \", /*#__PURE__*/React.createElement(KeyboardArrowRight, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 42\n      }\n    })),\n    backButton: /*#__PURE__*/React.createElement(Button, {\n      size: \"small\",\n      onClick: handleBack,\n      disabled: activeStep === 0,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 48\n      }\n    }, /*#__PURE__*/React.createElement(KeyboardArrowLeft, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 37\n      }\n    }), \"Back \"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 33\n    }\n  }), \" \");\n}","map":{"version":3,"sources":["/Users/zacharydorcinville/junior-dev/junior-jobs/client/src/Jobs.js"],"names":["React","useState","useEffect","Job","Typography","Button","makeStyles","useTheme","KeyboardArrowLeft","KeyboardArrowRight","MobileStepper","JobModal","TextField","Autocomplete","Jobs","jobs","open","setOpen","selectedJob","selectJob","handleClickOpen","handleClose","activeStep","setActiveStep","numJobs","length","numPages","Math","ceil","jobsOnPage","slice","jobsShown","setJobsShown","locations","jobTypes","datesPosted","forEach","job","includes","location","push","type","created_at","handleNext","prevActiveStep","handleBack","handleLocationChange","event","value","newJobs","filter","handleTypeChange","handleDateChange","generateId","result","characters","charactersLength","i","charAt","floor","random","filterStyle","field","width","margin","filterContainerStyle","marginTop","border","position","backgroundColor","borderRadius","zIndex","style","params","color","fontFamily","fontSize","textAlign","map","padding"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Job from './Job';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport MobileStepper from '@material-ui/core/MobileStepper';\nimport JobModal from './JobModal';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\n\nexport default function Jobs({ jobs }) {\n\n    // modal\n    const [open, setOpen] = useState(false);\n    const [selectedJob, selectJob] = useState({});\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    // pagination (FIX THIS)\n    const [activeStep, setActiveStep] = useState(0);\n    const numJobs = jobs.length;\n    const numPages = Math.ceil(numJobs / 50);\n    const jobsOnPage = jobs.slice(activeStep * 50, (activeStep * 50) + 50);\n\n    // get distinct locations, job types, and dates posted for all jobs\n    const [jobsShown, setJobsShown] = useState([]);\n    const locations = [];\n    const jobTypes = [];\n    const datesPosted = [];\n\n    jobs.forEach(job => {\n        if (locations.includes(job.location)) return;\n        locations.push(job.location);\n\n        if (jobTypes.includes(job.type)) return;\n        jobTypes.push(job.type);\n\n        if (datesPosted.includes(job.created_at)) return;\n        datesPosted.push(job.created_at);\n    });\n\n    useEffect(() => {\n        setJobsShown(jobsOnPage);\n    }, [numJobs]);\n\n    function handleNext() {\n        setActiveStep(prevActiveStep => prevActiveStep + 1);\n    }\n\n    function handleBack() {\n        setActiveStep(prevActiveStep => prevActiveStep - 1);\n    }\n\n    function handleLocationChange(event, value) {\n        if (value === null) {\n            setJobsShown(jobsOnPage);\n        } else {\n\n            const newJobs = jobs.filter(job => {\n                return job.location === value;\n            });\n\n            setJobsShown(newJobs);\n        }\n    }\n\n    function handleTypeChange(event, value) {\n        if (value === null) {\n            setJobsShown(jobsOnPage);\n        } else {\n\n            const newJobs = jobs.filter(job => {\n                return job.type === value;\n            });\n\n            setJobsShown(newJobs);\n        }\n    }\n\n    function handleDateChange(event, value) {\n        if (value === null) {\n            setJobsShown(jobsOnPage);\n        } else {\n\n            const newJobs = jobs.filter(job => {\n                return job.created_at === value;\n            });\n\n            setJobsShown(newJobs);\n        }\n    }\n\n    // set random key for each job listing\n    function generateId(length) {\n        var result = '';\n        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        var charactersLength = characters.length;\n        for (var i = 0; i < length; i++) {\n            result += characters.charAt(Math.floor(Math.random() * charactersLength));\n        }\n        return result;\n    }\n\n    const filterStyle = makeStyles({\n        field: {\n            width: '120px',\n            margin: '20px',\n        },\n    });\n\n    const filterContainerStyle = {\n        width: '200px',\n        marginTop: '200px',\n        border: '2px solid black',\n        position: 'absolute',\n        backgroundColor: 'white',\n        borderRadius: '0px 25px 25px 0px',\n        zIndex: '2',\n    }\n\n    const style = filterStyle();\n\n    return ( <\n            div className = 'jobs' >\n            <\n            div className = 'filters col-sm-2'\n            style = { filterContainerStyle } >\n            <\n            Autocomplete className = { style.field }\n            id = \"location-filter\"\n            options = { locations }\n            onChange = { handleLocationChange }\n            renderInput = {\n                (params) => < TextField {...params }\n                label = \"Location\"\n                variant = \"outlined\"\n                autoComplete = { true }\n                />} /\n                >\n                <\n                Autocomplete\n                className = { style.field }\n                id = \"type-filter\"\n                options = { jobTypes }\n                onChange = { handleTypeChange }\n                renderInput = {\n                    (params) => < TextField {...params }\n                    label = \"Job Type\"\n                    variant = \"outlined\"\n                    autoComplete = { true }\n                    />} /\n                    >\n                    <\n                    Autocomplete\n                    className = { style.field }\n                    id = \"location-filter\"\n                    options = { datesPosted }\n                    onChange = { handleDateChange }\n                    renderInput = {\n                        (params) => < TextField {...params }\n                        label = \"Date Posted\"\n                        variant = \"outlined\"\n                        autoComplete = { true }\n                        />} /\n                        >\n                        <\n                        /div>\n\n                        <\n                        JobModal open = { open }\n                        job = { selectedJob }\n                        handleClose = { handleClose }\n                        /> <\n                        Typography variant = 'h4'\n                        component = 'h1'\n                        style = {\n                            { color: 'white', fontFamily: 'Encode Sans', fontSize: '27px', textAlign: 'left' } } >\n                        Junior Level Software Developer Jobs <\n                        /Typography> <\n                        Typography variant = 'h6'\n                        component = 'h1'\n                        style = {\n                            { color: 'white', fontFamily: 'Encode Sans', fontSize: '16px' } } > { numJobs }\n                        jobs found. <\n                        /Typography>\n\n                        {\n                            jobsShown.map((job) => < Job job = { job }\n                                key = { generateId(6) }\n                                onClick = {\n                                    () => {\n                                        selectJob(job);\n                                        handleClickOpen();\n                                    }\n                                }\n                                />)}\n\n                                <\n                                div id = 'page-num'\n                                style = {\n                                    { padding: '8px' } } >\n                                Page { activeStep + 1 }\n                                of { numPages } <\n                                /div>\n\n                                <\n                                MobileStepper variant = \"progress\"\n                                steps = { Math.ceil(numJobs / 50) }\n                                position = \"static\"\n                                activeStep = { activeStep }\n                                nextButton = { <\n                                    Button size = \"small\"\n                                    onClick = { handleNext }\n                                    disabled = { activeStep === 5 } >\n                                    Next <\n                                    KeyboardArrowRight / >\n                                    <\n                                    /Button>\n                                }\n                                backButton = { <\n                                    Button size = \"small\"\n                                    onClick = { handleBack }\n                                    disabled = { activeStep === 0 } >\n                                    <\n                                    KeyboardArrowLeft / >\n                                    Back <\n                                    /Button>\n                                }\n                                /> <\n                                /div>\n                            )\n                        }"]},"metadata":{},"sourceType":"module"}