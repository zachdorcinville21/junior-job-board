{"ast":null,"code":"var _jsxFileName = \"/Users/zacharydorcinville/junior-dev/junior-jobs/client/src/Jobs.js\";\nimport React, { useState, useEffect } from 'react';\nimport Job from './Job';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport MobileStepper from '@material-ui/core/MobileStepper';\nimport JobModal from './JobModal';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Case from \"./work.svg\";\nexport default function Jobs({\n  jobs\n}) {\n  // modal\n  const [open, setOpen] = useState(false);\n  const [selectedJob, selectJob] = useState({});\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  }; // pagination (FIX THIS)\n\n\n  const [activeStep, setActiveStep] = useState(0);\n  const numJobs = jobs.length;\n  const numPages = Math.ceil(numJobs / 20);\n  const jobsOnPage = jobs.slice(activeStep * 20, activeStep * 20 + 20); // get distinct locations, job types, and dates posted for all jobs\n\n  const [jobsShown, setJobsShown] = useState([]);\n  const locations = [];\n  const jobTypes = [];\n  const datesPosted = [];\n  jobs.forEach(job => {\n    if (locations.includes(job.location)) return;\n    locations.push(job.location);\n    if (jobTypes.includes(job.type)) return;\n    jobTypes.push(job.type);\n    if (datesPosted.includes(job.created_at)) return;\n    datesPosted.push(job.created_at);\n  });\n  useEffect(() => {\n    setJobsShown(jobsOnPage);\n  }, [numPages]);\n\n  function handleNext() {\n    setActiveStep(prevActiveStep => prevActiveStep + 1);\n  }\n\n  function handleBack() {\n    setActiveStep(prevActiveStep => prevActiveStep - 1);\n  }\n\n  function handleLocationChange(event, value) {\n    if (value === null) {\n      setJobsShown(jobsOnPage);\n    } else {\n      const newJobs = jobs.filter(job => {\n        return job.location === value;\n      });\n      setJobsShown(newJobs);\n    }\n  }\n\n  function handleTypeChange(event, value) {\n    if (value === null) {\n      setJobsShown(jobsOnPage);\n    } else {\n      const newJobs = jobs.filter(job => {\n        return job.type === value;\n      });\n      setJobsShown(newJobs);\n    }\n  }\n\n  function handleDateChange(event, value) {\n    if (value === null) {\n      setJobsShown(jobsOnPage);\n    } else {\n      const newJobs = jobs.filter(job => {\n        return job.created_at === value;\n      });\n      setJobsShown(newJobs);\n    }\n  } // set random key for each job listing\n\n\n  function generateId(length) {\n    var result = '';\n    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var charactersLength = characters.length;\n\n    for (var i = 0; i < length; i++) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n\n    return result;\n  }\n\n  const filterStyle = makeStyles({\n    field: {\n      width: '120px',\n      margin: '20px'\n    }\n  });\n  const filterContainerStyle = {\n    width: '200px',\n    marginTop: '200px',\n    border: '2px solid black',\n    position: 'absolute',\n    backgroundColor: 'white',\n    borderRadius: '0px 25px 25px 0px',\n    zIndex: '2'\n  };\n  const style = filterStyle();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"jobs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"filters col-sm-2\",\n    style: filterContainerStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Autocomplete, {\n    className: style.field,\n    id: \"location-filter\",\n    options: locations,\n    onChange: handleLocationChange,\n    renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n      label: \"Location\",\n      variant: \"outlined\",\n      autoComplete: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 46\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Autocomplete, {\n    className: style.field,\n    id: \"type-filter\",\n    options: jobTypes,\n    onChange: handleTypeChange,\n    renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n      label: \"Job Type\",\n      variant: \"outlined\",\n      autoComplete: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 46\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Autocomplete, {\n    className: style.field,\n    id: \"location-filter\",\n    options: datesPosted,\n    onChange: handleDateChange,\n    renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n      label: \"Date Posted\",\n      variant: \"outlined\",\n      autoComplete: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 46\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(JobModal, {\n    open: open,\n    job: selectedJob,\n    handleClose: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      padding: '15px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h4\",\n    component: \"h1\",\n    style: {\n      color: 'white',\n      fontFamily: 'Encode Sans',\n      fontSize: '27px',\n      textAlign: 'left',\n      marginLeft: '8px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 17\n    }\n  }, \"Junior Level Software Developer Jobs \", /*#__PURE__*/React.createElement(\"img\", {\n    src: Case,\n    style: {\n      width: '35px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 58\n    }\n  })), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    component: \"h1\",\n    style: {\n      color: 'white',\n      fontFamily: 'Encode Sans',\n      fontSize: '16px',\n      textAlign: 'left',\n      marginLeft: '8px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 17\n    }\n  }, numJobs, \" jobs found.\")), jobsShown.map(job => /*#__PURE__*/React.createElement(Job, {\n    job: job,\n    key: generateId(6),\n    onClick: () => {\n      selectJob(job);\n      handleClickOpen();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 37\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"page-num\",\n    style: {\n      padding: '8px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }\n  }, \"Page \", activeStep + 1, \" of \", numPages), /*#__PURE__*/React.createElement(MobileStepper, {\n    variant: \"progress\",\n    steps: Math.ceil(numJobs / 50),\n    position: \"static\",\n    activeStep: activeStep,\n    nextButton: /*#__PURE__*/React.createElement(Button, {\n      size: \"small\",\n      onClick: handleNext,\n      disabled: activeStep === 5,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 21\n      }\n    }, \"Next\", /*#__PURE__*/React.createElement(KeyboardArrowRight, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 25\n      }\n    })),\n    backButton: /*#__PURE__*/React.createElement(Button, {\n      size: \"small\",\n      onClick: handleBack,\n      disabled: activeStep === 0,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(KeyboardArrowLeft, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 25\n      }\n    }), \"Back\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 13\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/zacharydorcinville/junior-dev/junior-jobs/client/src/Jobs.js"],"names":["React","useState","useEffect","Job","Typography","Button","makeStyles","useTheme","KeyboardArrowLeft","KeyboardArrowRight","MobileStepper","JobModal","TextField","Autocomplete","Jobs","jobs","open","setOpen","selectedJob","selectJob","handleClickOpen","handleClose","activeStep","setActiveStep","numJobs","length","numPages","Math","ceil","jobsOnPage","slice","jobsShown","setJobsShown","locations","jobTypes","datesPosted","forEach","job","includes","location","push","type","created_at","handleNext","prevActiveStep","handleBack","handleLocationChange","event","value","newJobs","filter","handleTypeChange","handleDateChange","generateId","result","characters","charactersLength","i","charAt","floor","random","filterStyle","field","width","margin","filterContainerStyle","marginTop","border","position","backgroundColor","borderRadius","zIndex","style","params","padding","color","fontFamily","fontSize","textAlign","marginLeft","Case","map"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAASC,UAAT,EAAqBC,QAArB,QAAqC,0BAArC;AACA,OAAOC,iBAAP,MAA8B,sCAA9B;AACA,OAAOC,kBAAP,MAA+B,uCAA/B;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;;AAIA,eAAe,SAASC,IAAT,CAAc;AAAEC,EAAAA;AAAF,CAAd,EAAwB;AAEnC;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBhB,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAM,CAACiB,WAAD,EAAcC,SAAd,IAA2BlB,QAAQ,CAAC,EAAD,CAAzC;;AAEA,QAAMmB,eAAe,GAAG,MAAM;AAC1BH,IAAAA,OAAO,CAAC,IAAD,CAAP;AACH,GAFD;;AAIA,QAAMI,WAAW,GAAG,MAAM;AACtBJ,IAAAA,OAAO,CAAC,KAAD,CAAP;AACH,GAFD,CAVmC,CAcnC;;;AACA,QAAM,CAACK,UAAD,EAAaC,aAAb,IAA8BtB,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAMuB,OAAO,GAAGT,IAAI,CAACU,MAArB;AACA,QAAMC,QAAQ,GAAGC,IAAI,CAACC,IAAL,CAAUJ,OAAO,GAAG,EAApB,CAAjB;AACA,QAAMK,UAAU,GAAGd,IAAI,CAACe,KAAL,CAAWR,UAAU,GAAG,EAAxB,EAA6BA,UAAU,GAAG,EAAd,GAAoB,EAAhD,CAAnB,CAlBmC,CAoBnC;;AACA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4B/B,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAMgC,SAAS,GAAG,EAAlB;AACA,QAAMC,QAAQ,GAAG,EAAjB;AACA,QAAMC,WAAW,GAAG,EAApB;AAEApB,EAAAA,IAAI,CAACqB,OAAL,CAAaC,GAAG,IAAI;AAChB,QAAIJ,SAAS,CAACK,QAAV,CAAmBD,GAAG,CAACE,QAAvB,CAAJ,EAAsC;AACtCN,IAAAA,SAAS,CAACO,IAAV,CAAeH,GAAG,CAACE,QAAnB;AAEA,QAAIL,QAAQ,CAACI,QAAT,CAAkBD,GAAG,CAACI,IAAtB,CAAJ,EAAiC;AACjCP,IAAAA,QAAQ,CAACM,IAAT,CAAcH,GAAG,CAACI,IAAlB;AAEA,QAAIN,WAAW,CAACG,QAAZ,CAAqBD,GAAG,CAACK,UAAzB,CAAJ,EAA0C;AAC1CP,IAAAA,WAAW,CAACK,IAAZ,CAAiBH,GAAG,CAACK,UAArB;AACH,GATD;AAWAxC,EAAAA,SAAS,CAAC,MAAM;AACZ8B,IAAAA,YAAY,CAACH,UAAD,CAAZ;AACH,GAFQ,EAEN,CAACH,QAAD,CAFM,CAAT;;AAKA,WAASiB,UAAT,GAAsB;AAClBpB,IAAAA,aAAa,CAACqB,cAAc,IAAIA,cAAc,GAAG,CAApC,CAAb;AACH;;AAED,WAASC,UAAT,GAAsB;AAClBtB,IAAAA,aAAa,CAACqB,cAAc,IAAIA,cAAc,GAAG,CAApC,CAAb;AACH;;AAED,WAASE,oBAAT,CAA8BC,KAA9B,EAAqCC,KAArC,EAA4C;AACxC,QAAIA,KAAK,KAAK,IAAd,EAAoB;AAChBhB,MAAAA,YAAY,CAACH,UAAD,CAAZ;AACH,KAFD,MAEO;AAEH,YAAMoB,OAAO,GAAGlC,IAAI,CAACmC,MAAL,CAAYb,GAAG,IAAI;AAC/B,eAAOA,GAAG,CAACE,QAAJ,KAAiBS,KAAxB;AACH,OAFe,CAAhB;AAIAhB,MAAAA,YAAY,CAACiB,OAAD,CAAZ;AACH;AACJ;;AAED,WAASE,gBAAT,CAA0BJ,KAA1B,EAAiCC,KAAjC,EAAwC;AACpC,QAAIA,KAAK,KAAK,IAAd,EAAoB;AAChBhB,MAAAA,YAAY,CAACH,UAAD,CAAZ;AACH,KAFD,MAEO;AAEH,YAAMoB,OAAO,GAAGlC,IAAI,CAACmC,MAAL,CAAYb,GAAG,IAAI;AAC/B,eAAOA,GAAG,CAACI,IAAJ,KAAaO,KAApB;AACH,OAFe,CAAhB;AAIAhB,MAAAA,YAAY,CAACiB,OAAD,CAAZ;AACH;AACJ;;AAED,WAASG,gBAAT,CAA0BL,KAA1B,EAAiCC,KAAjC,EAAwC;AACpC,QAAIA,KAAK,KAAK,IAAd,EAAoB;AAChBhB,MAAAA,YAAY,CAACH,UAAD,CAAZ;AACH,KAFD,MAEO;AAEH,YAAMoB,OAAO,GAAGlC,IAAI,CAACmC,MAAL,CAAYb,GAAG,IAAI;AAC/B,eAAOA,GAAG,CAACK,UAAJ,KAAmBM,KAA1B;AACH,OAFe,CAAhB;AAIAhB,MAAAA,YAAY,CAACiB,OAAD,CAAZ;AACH;AACJ,GAvFkC,CAyFnC;;;AACA,WAASI,UAAT,CAAoB5B,MAApB,EAA4B;AACxB,QAAI6B,MAAM,GAAG,EAAb;AACA,QAAIC,UAAU,GAAG,gEAAjB;AACA,QAAIC,gBAAgB,GAAGD,UAAU,CAAC9B,MAAlC;;AACA,SAAK,IAAIgC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhC,MAApB,EAA4BgC,CAAC,EAA7B,EAAiC;AAC7BH,MAAAA,MAAM,IAAIC,UAAU,CAACG,MAAX,CAAkB/B,IAAI,CAACgC,KAAL,CAAWhC,IAAI,CAACiC,MAAL,KAAgBJ,gBAA3B,CAAlB,CAAV;AACH;;AACD,WAAOF,MAAP;AACH;;AAED,QAAMO,WAAW,GAAGvD,UAAU,CAAC;AAC3BwD,IAAAA,KAAK,EAAE;AACHC,MAAAA,KAAK,EAAE,OADJ;AAEHC,MAAAA,MAAM,EAAE;AAFL;AADoB,GAAD,CAA9B;AAOA,QAAMC,oBAAoB,GAAG;AACzBF,IAAAA,KAAK,EAAE,OADkB;AAEzBG,IAAAA,SAAS,EAAE,OAFc;AAGzBC,IAAAA,MAAM,EAAE,iBAHiB;AAIzBC,IAAAA,QAAQ,EAAE,UAJe;AAKzBC,IAAAA,eAAe,EAAE,OALQ;AAMzBC,IAAAA,YAAY,EAAE,mBANW;AAOzBC,IAAAA,MAAM,EAAE;AAPiB,GAA7B;AAUA,QAAMC,KAAK,GAAGX,WAAW,EAAzB;AAEA,sBACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAkC,IAAA,KAAK,EAAEI,oBAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,YAAD;AACI,IAAA,SAAS,EAAEO,KAAK,CAACV,KADrB;AAEI,IAAA,EAAE,EAAC,iBAFP;AAGI,IAAA,OAAO,EAAE7B,SAHb;AAII,IAAA,QAAQ,EAAEa,oBAJd;AAKI,IAAA,WAAW,EAAG2B,MAAD,iBAAY,oBAAC,SAAD,oBAAeA,MAAf;AAAuB,MAAA,KAAK,EAAC,UAA7B;AAAwC,MAAA,OAAO,EAAC,UAAhD;AAA2D,MAAA,YAAY,EAAE,IAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAL7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAQI,oBAAC,YAAD;AACI,IAAA,SAAS,EAAED,KAAK,CAACV,KADrB;AAEI,IAAA,EAAE,EAAC,aAFP;AAGI,IAAA,OAAO,EAAE5B,QAHb;AAII,IAAA,QAAQ,EAAEiB,gBAJd;AAKI,IAAA,WAAW,EAAGsB,MAAD,iBAAY,oBAAC,SAAD,oBAAeA,MAAf;AAAuB,MAAA,KAAK,EAAC,UAA7B;AAAwC,MAAA,OAAO,EAAC,UAAhD;AAA2D,MAAA,YAAY,EAAE,IAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAL7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARJ,eAeI,oBAAC,YAAD;AACI,IAAA,SAAS,EAAED,KAAK,CAACV,KADrB;AAEI,IAAA,EAAE,EAAC,iBAFP;AAGI,IAAA,OAAO,EAAE3B,WAHb;AAII,IAAA,QAAQ,EAAEiB,gBAJd;AAKI,IAAA,WAAW,EAAGqB,MAAD,iBAAY,oBAAC,SAAD,oBAAeA,MAAf;AAAuB,MAAA,KAAK,EAAC,aAA7B;AAA2C,MAAA,OAAO,EAAC,UAAnD;AAA8D,MAAA,YAAY,EAAE,IAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAL7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfJ,CADJ,eAyBI,oBAAC,QAAD;AAAU,IAAA,IAAI,EAAEzD,IAAhB;AAAsB,IAAA,GAAG,EAAEE,WAA3B;AAAwC,IAAA,WAAW,EAAEG,WAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAzBJ,eA0BI;AAAK,IAAA,KAAK,EAAE;AAAEqD,MAAAA,OAAO,EAAE;AAAX,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAC,IAApB;AAAyB,IAAA,SAAS,EAAC,IAAnC;AAAwC,IAAA,KAAK,EAAE;AAAEC,MAAAA,KAAK,EAAE,OAAT;AAAkBC,MAAAA,UAAU,EAAE,aAA9B;AAA6CC,MAAAA,QAAQ,EAAE,MAAvD;AAA+DC,MAAAA,SAAS,EAAE,MAA1E;AAAkFC,MAAAA,UAAU,EAAE;AAA9F,KAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2DACyC;AAAK,IAAA,GAAG,EAAEC,IAAV;AAAgB,IAAA,KAAK,EAAE;AAAEjB,MAAAA,KAAK,EAAE;AAAT,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADzC,CADJ,eAII,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAC,IAApB;AAAyB,IAAA,SAAS,EAAC,IAAnC;AAAwC,IAAA,KAAK,EAAE;AAAEY,MAAAA,KAAK,EAAE,OAAT;AAAkBC,MAAAA,UAAU,EAAE,aAA9B;AAA6CC,MAAAA,QAAQ,EAAE,MAAvD;AAA+DC,MAAAA,SAAS,EAAE,MAA1E;AAAkFC,MAAAA,UAAU,EAAE;AAA9F,KAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKvD,OADL,iBAJJ,CA1BJ,EAmCKO,SAAS,CAACkD,GAAV,CAAe5C,GAAD,iBAAS,oBAAC,GAAD;AAAK,IAAA,GAAG,EAAEA,GAAV;AAAe,IAAA,GAAG,EAAEgB,UAAU,CAAC,CAAD,CAA9B;AAAmC,IAAA,OAAO,EAAE,MAAM;AACtElC,MAAAA,SAAS,CAACkB,GAAD,CAAT;AACAjB,MAAAA,eAAe;AAClB,KAHuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAvB,CAnCL,eAwCI;AAAK,IAAA,EAAE,EAAC,UAAR;AAAmB,IAAA,KAAK,EAAE;AAAEsD,MAAAA,OAAO,EAAE;AAAX,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cACUpD,UAAU,GAAG,CADvB,UAC8BI,QAD9B,CAxCJ,eA4CI,oBAAC,aAAD;AACI,IAAA,OAAO,EAAC,UADZ;AAEI,IAAA,KAAK,EAAEC,IAAI,CAACC,IAAL,CAAUJ,OAAO,GAAG,EAApB,CAFX;AAGI,IAAA,QAAQ,EAAC,QAHb;AAII,IAAA,UAAU,EAAEF,UAJhB;AAKI,IAAA,UAAU,eACN,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,OAAb;AAAqB,MAAA,OAAO,EAAEqB,UAA9B;AAA0C,MAAA,QAAQ,EAAErB,UAAU,KAAK,CAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAEI,oBAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CANR;AAWI,IAAA,UAAU,eACN,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,OAAb;AAAqB,MAAA,OAAO,EAAEuB,UAA9B;AAA0C,MAAA,QAAQ,EAAEvB,UAAU,KAAK,CAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,SAZR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA5CJ,CADJ;AAiEH","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Job from './Job';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport MobileStepper from '@material-ui/core/MobileStepper';\nimport JobModal from './JobModal';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Case from './work.svg';\n\n\nexport default function Jobs({ jobs }) {\n\n    // modal\n    const [open, setOpen] = useState(false);\n    const [selectedJob, selectJob] = useState({});\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    // pagination (FIX THIS)\n    const [activeStep, setActiveStep] = useState(0);\n    const numJobs = jobs.length;\n    const numPages = Math.ceil(numJobs / 20);\n    const jobsOnPage = jobs.slice(activeStep * 20, (activeStep * 20) + 20);\n\n    // get distinct locations, job types, and dates posted for all jobs\n    const [jobsShown, setJobsShown] = useState([]);\n    const locations = [];\n    const jobTypes = [];\n    const datesPosted = [];\n\n    jobs.forEach(job => {\n        if (locations.includes(job.location)) return;\n        locations.push(job.location);\n\n        if (jobTypes.includes(job.type)) return;\n        jobTypes.push(job.type);\n\n        if (datesPosted.includes(job.created_at)) return;\n        datesPosted.push(job.created_at);\n    });\n\n    useEffect(() => {\n        setJobsShown(jobsOnPage);\n    }, [numPages])\n\n\n    function handleNext() {\n        setActiveStep(prevActiveStep => prevActiveStep + 1);\n    }\n\n    function handleBack() {\n        setActiveStep(prevActiveStep => prevActiveStep - 1);\n    }\n\n    function handleLocationChange(event, value) {\n        if (value === null) {\n            setJobsShown(jobsOnPage);\n        } else {\n\n            const newJobs = jobs.filter(job => {\n                return job.location === value;\n            });\n\n            setJobsShown(newJobs);\n        }\n    }\n\n    function handleTypeChange(event, value) {\n        if (value === null) {\n            setJobsShown(jobsOnPage);\n        } else {\n\n            const newJobs = jobs.filter(job => {\n                return job.type === value;\n            });\n\n            setJobsShown(newJobs);\n        }\n    }\n\n    function handleDateChange(event, value) {\n        if (value === null) {\n            setJobsShown(jobsOnPage);\n        } else {\n\n            const newJobs = jobs.filter(job => {\n                return job.created_at === value;\n            });\n\n            setJobsShown(newJobs);\n        }\n    }\n\n    // set random key for each job listing\n    function generateId(length) {\n        var result = '';\n        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        var charactersLength = characters.length;\n        for (var i = 0; i < length; i++) {\n            result += characters.charAt(Math.floor(Math.random() * charactersLength));\n        }\n        return result;\n    }\n\n    const filterStyle = makeStyles({\n        field: {\n            width: '120px',\n            margin: '20px',\n        },\n    });\n\n    const filterContainerStyle = {\n        width: '200px',\n        marginTop: '200px',\n        border: '2px solid black',\n        position: 'absolute',\n        backgroundColor: 'white',\n        borderRadius: '0px 25px 25px 0px',\n        zIndex: '2',\n    }\n\n    const style = filterStyle();\n\n    return (\n        <div className='jobs'>\n            <div className='filters col-sm-2' style={filterContainerStyle}>\n                <Autocomplete\n                    className={style.field}\n                    id=\"location-filter\"\n                    options={locations}\n                    onChange={handleLocationChange}\n                    renderInput={(params) => <TextField {...params} label=\"Location\" variant=\"outlined\" autoComplete={true} />}\n                />\n                <Autocomplete\n                    className={style.field}\n                    id=\"type-filter\"\n                    options={jobTypes}\n                    onChange={handleTypeChange}\n                    renderInput={(params) => <TextField {...params} label=\"Job Type\" variant=\"outlined\" autoComplete={true} />}\n                />\n                <Autocomplete\n                    className={style.field}\n                    id=\"location-filter\"\n                    options={datesPosted}\n                    onChange={handleDateChange}\n                    renderInput={(params) => <TextField {...params} label=\"Date Posted\" variant=\"outlined\" autoComplete={true} />}\n                />\n            </div>\n\n            <JobModal open={open} job={selectedJob} handleClose={handleClose} />\n            <div style={{ padding: '15px' }}>\n                <Typography variant='h4' component='h1' style={{ color: 'white', fontFamily: 'Encode Sans', fontSize: '27px', textAlign: 'left', marginLeft: '8px' }}>\n                    Junior Level Software Developer Jobs <img src={Case} style={{ width: '35px' }} />\n                </Typography>\n                <Typography variant='h6' component='h1' style={{ color: 'white', fontFamily: 'Encode Sans', fontSize: '16px', textAlign: 'left', marginLeft: '8px' }}>\n                    {numJobs} jobs found.\n            </Typography>\n            </div>\n\n            {jobsShown.map((job) => <Job job={job} key={generateId(6)} onClick={() => {\n                selectJob(job);\n                handleClickOpen();\n            }} />)}\n\n            <div id='page-num' style={{ padding: '8px' }}>\n                Page {activeStep + 1} of {numPages}\n            </div>\n\n            <MobileStepper\n                variant=\"progress\"\n                steps={Math.ceil(numJobs / 50)}\n                position=\"static\"\n                activeStep={activeStep}\n                nextButton={\n                    <Button size=\"small\" onClick={handleNext} disabled={activeStep === 5}>\n                        Next\n                        <KeyboardArrowRight />\n                    </Button>\n                }\n                backButton={\n                    <Button size=\"small\" onClick={handleBack} disabled={activeStep === 0}>\n                        <KeyboardArrowLeft />\n                        Back\n                    </Button>\n                }\n            />\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}