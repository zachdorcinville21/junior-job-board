{"ast":null,"code":"var _jsxFileName = \"/Users/zacharydorcinville/junior-dev/junior-jobs/client/src/Jobs.js\";\nimport React from 'react';\nimport Job from './Job';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport MobileStepper from '@material-ui/core/MobileStepper';\nimport JobModal from './JobModal';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nexport default function Jobs({\n  jobs\n}) {\n  // modal\n  const [open, setOpen] = React.useState(false);\n  const [selectedJob, selectJob] = React.useState({});\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  }; // pagination\n\n\n  const [activeStep, setActiveStep] = React.useState(0); // filter by location(location), job type(type), date posted (created_at)\n\n  const [jobsShown, setJobsShown] = React.useState(jobs);\n  const locations = [];\n  const jobTypes = [];\n  const datesPosted = [];\n  const numJobs = jobs.length;\n  const numPages = Math.ceil(numJobs / 50);\n  const jobsOnPage = jobs.slice(activeStep * 50, activeStep * 50 + 50); // get distinct locations, job types, and dates posted for all jobs\n\n  jobs.forEach(job => {\n    if (locations.includes(job.location)) return;\n    locations.push(job.location);\n    if (jobTypes.includes(job.type)) return;\n    jobTypes.push(job.type);\n    if (datesPosted.includes(job.created_at)) return;\n    datesPosted.push(job.created_at);\n  });\n\n  function handleNext() {\n    setActiveStep(prevActiveStep => prevActiveStep + 1);\n  }\n\n  function handleBack() {\n    setActiveStep(prevActiveStep => prevActiveStep - 1);\n  } // set random key for each job listing\n\n\n  function generateId(length) {\n    var result = '';\n    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var charactersLength = characters.length;\n\n    for (var i = 0; i < length; i++) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n\n    return result;\n  }\n\n  const filterStyle = makeStyles({\n    field: {\n      width: '120px',\n      margin: '20px'\n    },\n    textField: {\n      margin: '5px',\n      marginRight: '300px'\n    }\n  });\n  const filterContainerStyle = {\n    width: '200px',\n    marginTop: '200px',\n    border: '2px solid black',\n    position: 'absolute',\n    backgroundColor: 'white'\n  };\n  const style = filterStyle();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"jobs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"filters col-sm-2\",\n    style: filterContainerStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Autocomplete, {\n    className: style.field,\n    id: \"location-filter\",\n    options: locations,\n    renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({\n      className: style.textField\n    }, params, {\n      label: \"Location\",\n      variant: \"outlined\",\n      autoComplete: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 46\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Autocomplete, {\n    className: style.field,\n    id: \"type-filter\",\n    options: jobTypes,\n    renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({\n      className: style.textField\n    }, params, {\n      label: \"Job Type\",\n      variant: \"outlined\",\n      autoComplete: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 46\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Autocomplete, {\n    className: style.field,\n    id: \"location-filter\",\n    options: datesPosted,\n    renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({\n      className: style.textField\n    }, params, {\n      label: \"Date Posted\",\n      variant: \"outlined\",\n      autoComplete: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 46\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(JobModal, {\n    open: open,\n    job: selectedJob,\n    handleClose: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h4\",\n    component: \"h1\",\n    style: {\n      color: 'white'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }, \"Junior Level Software Engineer Jobs\"), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    component: \"h1\",\n    style: {\n      color: 'white'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  }, numJobs, \" jobs found.\"), jobsOnPage.map((job, i) => /*#__PURE__*/React.createElement(Job, {\n    job: job,\n    key: generateId(6),\n    onClick: () => {\n      selectJob(job);\n      handleClickOpen();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 41\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"page-num\",\n    style: {\n      padding: '8px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }\n  }, \"Page \", activeStep + 1, \" of \", numPages), /*#__PURE__*/React.createElement(MobileStepper, {\n    variant: \"progress\",\n    steps: Math.ceil(numJobs / 50),\n    position: \"static\",\n    activeStep: activeStep,\n    nextButton: /*#__PURE__*/React.createElement(Button, {\n      size: \"small\",\n      onClick: handleNext,\n      disabled: activeStep === 5,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 21\n      }\n    }, \"Next\", /*#__PURE__*/React.createElement(KeyboardArrowRight, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 25\n      }\n    })),\n    backButton: /*#__PURE__*/React.createElement(Button, {\n      size: \"small\",\n      onClick: handleBack,\n      disabled: activeStep === 0,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(KeyboardArrowLeft, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 25\n      }\n    }), \"Back\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/zacharydorcinville/junior-dev/junior-jobs/client/src/Jobs.js"],"names":["React","Job","Typography","Button","makeStyles","useTheme","KeyboardArrowLeft","KeyboardArrowRight","MobileStepper","JobModal","TextField","Autocomplete","Jobs","jobs","open","setOpen","useState","selectedJob","selectJob","handleClickOpen","handleClose","activeStep","setActiveStep","jobsShown","setJobsShown","locations","jobTypes","datesPosted","numJobs","length","numPages","Math","ceil","jobsOnPage","slice","forEach","job","includes","location","push","type","created_at","handleNext","prevActiveStep","handleBack","generateId","result","characters","charactersLength","i","charAt","floor","random","filterStyle","field","width","margin","textField","marginRight","filterContainerStyle","marginTop","border","position","backgroundColor","style","params","color","map","padding"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Job from './Job';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport MobileStepper from '@material-ui/core/MobileStepper';\nimport JobModal from './JobModal';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\n\nexport default function Jobs({ jobs }) {\n\n    // modal\n    const [open, setOpen] = React.useState(false);\n    const [selectedJob, selectJob] = React.useState({});\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    // pagination\n    const [activeStep, setActiveStep] = React.useState(0);\n\n    // filter by location(location), job type(type), date posted (created_at)\n    const [jobsShown, setJobsShown] = React.useState(jobs);\n    const locations = [];\n    const jobTypes = [];\n    const datesPosted = [];\n\n    const numJobs = jobs.length;\n    const numPages = Math.ceil(numJobs / 50);\n\n    const jobsOnPage = jobs.slice(activeStep * 50, (activeStep * 50) + 50);\n\n    // get distinct locations, job types, and dates posted for all jobs\n    jobs.forEach(job => {\n        if (locations.includes(job.location)) return;\n        locations.push(job.location);\n\n        if (jobTypes.includes(job.type)) return;\n        jobTypes.push(job.type);\n\n        if (datesPosted.includes(job.created_at)) return;\n        datesPosted.push(job.created_at);\n    });\n\n\n\n    function handleNext() {\n        setActiveStep(prevActiveStep => prevActiveStep + 1);\n    }\n\n    function handleBack() {\n        setActiveStep(prevActiveStep => prevActiveStep - 1);\n    }\n\n    // set random key for each job listing\n    function generateId(length) {\n        var result = '';\n        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        var charactersLength = characters.length;\n        for (var i = 0; i < length; i++) {\n            result += characters.charAt(Math.floor(Math.random() * charactersLength));\n        }\n        return result;\n    }\n\n    const filterStyle = makeStyles({\n        field: {\n            width: '120px',\n            margin: '20px',\n        },\n\n        textField: {\n            margin: '5px',\n            marginRight: '300px',\n        }\n    });\n\n    const filterContainerStyle = {\n        width: '200px',\n        marginTop: '200px', \n        border: '2px solid black', \n        position: 'absolute', \n        backgroundColor: 'white',\n    }\n\n    const style = filterStyle();\n\n    return (\n        <div className='jobs'>\n            <div className='filters col-sm-2' style={filterContainerStyle}>\n                <Autocomplete\n                    className={style.field}\n                    id=\"location-filter\"\n                    options={locations}\n                    renderInput={(params) => <TextField className={style.textField} {...params} label=\"Location\" variant=\"outlined\" autoComplete={true} />}\n                />\n                <Autocomplete\n                    className={style.field}\n                    id=\"type-filter\"\n                    options={jobTypes}\n                    renderInput={(params) => <TextField className={style.textField} {...params} label=\"Job Type\" variant=\"outlined\" autoComplete={true} />}\n                />\n                <Autocomplete\n                    className={style.field}\n                    id=\"location-filter\"\n                    options={datesPosted}\n                    renderInput={(params) => <TextField className={style.textField} {...params} label=\"Date Posted\" variant=\"outlined\" autoComplete={true} />}\n                />\n            </div>\n\n            <JobModal open={open} job={selectedJob} handleClose={handleClose} />\n            <Typography variant='h4' component='h1' style={{ color: 'white' }}>\n                Junior Level Software Engineer Jobs\n            </Typography>\n            <Typography variant='h6' component='h1' style={{ color: 'white' }}>\n                {numJobs} jobs found.\n            </Typography>\n\n            {jobsOnPage.map((job, i) => <Job job={job} key={generateId(6)} onClick={() => {\n                selectJob(job);\n                handleClickOpen();\n            }} />)}\n\n            <div id='page-num' style={{ padding: '8px' }}>\n                Page {activeStep + 1} of {numPages}\n            </div>\n\n            <MobileStepper\n                variant=\"progress\"\n                steps={Math.ceil(numJobs / 50)}\n                position=\"static\"\n                activeStep={activeStep}\n                nextButton={\n                    <Button size=\"small\" onClick={handleNext} disabled={activeStep === 5}>\n                        Next\n                        <KeyboardArrowRight />\n                    </Button>\n                }\n                backButton={\n                    <Button size=\"small\" onClick={handleBack} disabled={activeStep === 0}>\n                        <KeyboardArrowLeft />\n                        Back\n                    </Button>\n                }\n            />\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}